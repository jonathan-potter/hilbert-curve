!function(t){function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}var e={};n.m=t,n.c=e,n.i=function(t){return t},n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},n.p="",n(n.s=5)}([function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=e(4),a=Math.PI,u=document.getElementsByTagName("canvas")[0],c=u.getContext("2d"),f=10,s=3;c.setLineDash([100,10]);var l=110,y=function(){function t(n){var e=n.direction,i=n.position,o=n.length;r(this,t),this.direction=e,this.position=i,this.length=o}return i(t,[{key:"startDraw",value:function(){f=(f+s)%l,c.lineDashOffset=-f,c.lineWidth=2,c.strokeStyle="white",c.beginPath();var t=this.position,n=t.x,e=t.y;c.moveTo(n,e)}},{key:"draw",value:function(){this.drawPartial(1)}},{key:"drawPartial",value:function(t){var n=this.position,e=n.x,r=n.y,i=(0,o.scalarMultiply)(this.direction,this.length*t),a=i.x,u=i.y;c.lineTo(e+a,r+u),this.position={x:e+a,y:r+u}}},{key:"endDraw",value:function(){c.stroke()}},{key:"clearScreen",value:function(){c.clearRect(0,0,u.width,u.height)}},{key:"rotate",value:function(t){var n=0;"L"===t?n=a/2:"R"===t&&(n=-a/2),this.direction=(0,o.rotate)(this.direction,n)}}]),t}();n.default=y},function(t,n,e){"use strict";function r(t){return t%2==0}function i(t){return 1===o(t%2)}Object.defineProperty(n,"__esModule",{value:!0});var o=Math.abs,a=["S","R","R","S"],u=n.nextOrder=function(t,n){var e=t.concat(t),o=0,a=r(n)?r:i;return e=e.map(function(t,n){return"S"===t&&(o+=1),"S"===t&&a(o)&&0!==n?"L":t}),e=e.map(function(t,n){return"S"===t&&0!==n?"T":t}),e=e.map(function(t,n){return n>e.length/2?t:"R"===t?"L":"L"===t?"R":t}),e.concat(e.slice().reverse())};n.turnsForOrder=function(t){for(var n=a,e=2;e<=t;e++)n=u(n,e);return n}},function(t,n){},function(t,n){},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=Math.atan2,i=Math.cos,o=Math.PI,a=Math.random,u=Math.sin,c=Math.sqrt,f=(n.randomVelocity=function(t){var n=2*a()*o,e=a()*t;return{x:e*i(n),y:e*u(n)}},n.dot=function(t,n){return t.x*n.x+t.y*n.y},n.magnitude=function(t){var n=t.x,e=t.y;return c(n*n+e*e)}),s=n.argument=function(t){return r(t.y,t.x)};n.normalize=function(t){var n=t.x,e=t.y,r=f(t);return{x:n/r,y:e/r}},n.middlePoint=function(t,n){return{x:(t.x+n.x)/2,y:(t.y+n.y)/2}},n.add=function(t,n){return{x:t.x+n.x,y:t.y+n.y}},n.subtract=function(t,n){return{x:t.x-n.x,y:t.y-n.y}},n.scalarMultiply=function(t,n){return{x:t.x*n,y:t.y*n}},n.reverse=function(t){return{x:-t.x,y:-t.y}},n.rotate=function(t,n){var e=f(t),r=s(t);return{x:e*i(r+n),y:e*u(r+n)}}},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(){var t=new a.default({direction:{x:1,y:0},position:{x:v/2,y:v/2},length:v});"R"===h[1]&&t.rotate("L"),t.clearScreen(),x=c(x+d,p),t.startDraw();for(var n=0;n<x/v;n++){var e=h[n];e&&(t.draw(),t.rotate(e))}t.drawPartial(x%v/v),t.endDraw(),l(i)}var o=e(0),a=r(o),u=e(1);e(3),e(2);var c=Math.min,f=Math.sqrt,s=window,l=s.requestAnimationFrame,y=4,d=3,h=(0,u.turnsForOrder)(y),v=1/f(h.length)*500;h.shift();var x=0,p=h.length*v;l(i)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,